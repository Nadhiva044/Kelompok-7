class Peta:
    def __init__(self):
        self.cityList = {}

    def printPeta(self):
        for kota in self.cityList:
            print(kota, ":", self.cityList[kota])

    def tambahkanKota(self, kota):
        if kota not in self.cityList:
            self.cityList[kota] = {}
            return True
        return False

    def hapusKota(self, kotaDihapus):
        if kotaDihapus in self.cityList:
            for kotalain in self.cityList:
                if kotaDihapus in self.cityList[kotalain]:
                    del self.cityList[kotalain][kotaDihapus]
            del self.cityList[kotaDihapus]
            return True
        return False

    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.cityList and kota2 in self.cityList:
            self.cityList[kota2][kota1] = jarak
            self.cityList[kota1][kota2] = jarak
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.cityList and kota2 in self.cityList:
            if kota2 in self.cityList[kota1] and kota1 in self.cityList[kota2]:
                del self.cityList[kota1][kota2]
                del self.cityList[kota2][kota1]
                return True
            else:
                print("Jalan tidak ditemukan.")
        return False

    def djikstra(self, source):
        distance = {}
        for city in self.cityList:
            distance[city] = float('inf')
        distance[source] = 0
        unvisited_cities = list(self.cityList.keys())
        while unvisited_cities:
            min_distance = float('inf')
            closest_city = None
            for city in unvisited_cities:
                if distance[city] < min_distance:
                    min_distance = distance[city]
                    closest_city = city
            unvisited_cities.remove(closest_city)
            for neighbor, jarak in self.cityList[closest_city].items():
                jarakNeighbor = distance[closest_city] + jarak
                if jarakNeighbor < distance[neighbor]:
                    distance[neighbor] = jarakNeighbor
        return distance

petaJatim = Peta()

petaJatim.tambahkanKota("Surabaya")
petaJatim.tambahkanKota("Sidoarjo")
petaJatim.tambahkanKota("Malang")
petaJatim.tambahkanKota("Kota Mojokerto")
petaJatim.tambahkanKota("Blitar")
petaJatim.tambahkanKota("Tulungagung")
petaJatim.tambahkanKota("Trenggalek")
petaJatim.tambahkanKota("Ponorogo")
petaJatim.tambahkanKota("Madiun")
petaJatim.tambahkanKota("Nganjuk")

print('------------------------------')
print('Jalan yang terhubung')
petaJatim.tambahkanJalan("Surabaya", "Kota Mojokerto", 49)
petaJatim.tambahkanJalan("Surabaya", "Sidoarjo", 32)
petaJatim.tambahkanJalan("Surabaya", "Gresik", 21)
petaJatim.tambahkanJalan("Sidoarjo", "Malang", 66)
petaJatim.tambahkanJalan("Sidoarjo", "Kota Mojokerto", 31)
petaJatim.tambahkanJalan("Gresik", "Kota Mojokerto", 50)
petaJatim.tambahkanJalan("Malang", "Kota Mojokerto", 86)
petaJatim.tambahkanJalan("Malang", "Blitar", 67)
petaJatim.tambahkanJalan("Nganjuk", "Kota Mojokerto", 67)
petaJatim.tambahkanJalan("Blitar", "Tulungagung", 40)
petaJatim.tambahkanJalan("Tulungagung", "Kota Mojokerto", 104)
petaJatim.tambahkanJalan("Tulungagung", "Nganjuk", 64)
petaJatim.tambahkanJalan("Tulungagung", "Trenggalek", 45)
petaJatim.tambahkanJalan("Trenggalek", "Ponorogo", 64)
petaJatim.tambahkanJalan("Ponorogo", "Madiun", 43)
petaJatim.tambahkanJalan("Madiun", "Nganjuk", 41)

petaJatim.printPeta()
print('------------------------------')
#print('Hapus kota Blitar dan Madiun')
#petaJerman.hapusKota("Blitar")
#petaJerman.hapusKota("Madiun")
petaJatim.djikstra("Surabaya")
jarakSemuaKota = petaJatim.djikstra("Surabaya")
print("Jarak Kota Berikut Nya dari Surabaya")
for kota, jarak in jarakSemuaKota.items():
    print(kota, "adalah", jarak, "KM")
